Step 1: Planning Your API

    1.1 Define the Purpose
    -> O propósito dessa API é simplesmente ter uma lista de usuários e uma lista de tarefas para atribuir essas tarefas para os usuários.

    1.2 Identify Resources
    Users: Represents individuals in the system.
    Tarefas: Tarefas a serem atribuídas aos usuários

    1.3 Define Endpoints and Methods
    Usuários
    • POST /users Criar um novo usuário.→
    • GET /users/{id} Obter informações de um usuário específico.→
    • PUT /users/{id} Atualizar informações do usuário.→
    • DELETE /users/{id} Remover um usuário (soft delete recomendado).→

    Tarefas
    • POST /tasks Criar uma nova tarefa.→
    • GET /tasks/{id} Obter detalhes de uma tarefa.→
    • GET /tasks?assignedTo={userId} Listar todas as tarefas atribuídas a um usuário.→
    • PUT /tasks/{id} Atualizar informações da tarefa (título, descrição, status).→
    • DELETE /tasks/{id} Remover uma tarefa.→

    Autenticação
    • POST /auth/login Login de usuários, retornando um token (por exemplo: JWT) para→
    autenticação nas demais requisições.


Step 2: API Design
    ========================================
    1. REST (Representational State Transfer):

        REST is the most implemented architecture in APIs.
        REST operates over HTTP and follows principles like statelessness, resource-based URLs, and HTTP methods: GET, POST, PUT, DELETE.
        Best For: Simple and scalable applications, web, and mobile apps.
    ========================================

    In this article, we will make a simple example of REST since it's one of the most used APIs and also because of its simplicity.
    2.2 API Requirements

        Authentication: Will users need to authenticate with your API (e.g., OAuth, JWT)? -> só Bearer toekn mesmo
        Rate Limiting: Will you need to limit how many requests users can make in a given time to prevent abuse? -> Não, não vai chegar nesse nível
        Data Format: Which format will the API use for data exchange (usually JSON but sometimes XML)? -> joga um JSON mesmo
        Versioning: How will you handle updates to your API? Versioning helps manage changes (e.g., v1, v2 in the URL). -> manutenção com v1 e v2 mesmo

Step 3: Set Up Your Development Environment
    Vai ser tudo escrito de Django mesmo azar do valdemar
    